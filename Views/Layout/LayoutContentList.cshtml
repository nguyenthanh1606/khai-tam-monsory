@model Frontend.Models.LayoutContentViewModel
@using PagedList.Mvc;
@using PagedList;
@using Frontend.Infrastructure.ExtensionMethod;
@using Frontend.Infrastructure.Utility;
@using Frontend.Infrastructure.Helpers;

@{
    ViewBag.Title = Model.Group.Title;
    ViewBag.Description = Model.Group.Description.RemoveHtml();
    if (!string.IsNullOrEmpty(Model.Group.ImageUrl))
    {
        ViewBag.Image = Url.Content(Model.Group.ImageUrl, true);
    }
    string ComponentViewPath = "~/Themes/" + TabWeb.GetCurrentTheme() + "/Views/Component/{0}.cshtml";
}

<link href="~/Themes/AnhNhan/css/info.css" rel="stylesheet" />
<link href="~/Themes/AnhNhan/css/User.css" rel="stylesheet" />

<div class="container-fluid wrap-page pd-left pd-right">
    <div class="title-link">
        @Html.Breadcrumb(Frontend.Infrastructure.Utility.BreadcrumbType.Group, Model.Group.GroupID, new { @class = "breadcrumb" })
    </div>

    <!-- main content -->
    <div class="row" style="margin: 0; margin-top: 20px;">
        <div class="col-md-3 list-nav" style="padding-left: 0; padding-right: 0">
            <div class="title-nav">
                @{Html.RenderAction(MVC.Component.GetChildGroup(0, "ListGroupMenuAll", null, false));
                }
            </div>
        </div>
        <div class="col-md-9 pd-an">
            <div class="detail-content-page" style="border: 1px solid #ccc">
                @if (Model.ListContent.Count > 1)
                {
                    <div class="title-form">
                        <span style="text-transform:uppercase;">@Model.Group.Title</span>
                    </div>
                    <div class="detail-page" style="padding: 5px 0px">
                        @foreach (var item in Model.ListContent)
                {
                            <div class="contentTiles">
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="img-content">
                                            <a href="@Url.CustomAction(Store.Service.SystemService.RoutingType.Content, item.ContentID)">
                                                <figure>
                                                    <img src="@item.PictureUrl" class="mx-auto d-block" width="100%" alt="content 1">
                                                </figure>
                                            </a>
                                        </div>
                                    </div>
                                    <div class="detail-content col-md-8">
                                        <a href="@Url.CustomAction(Store.Service.SystemService.RoutingType.Content, item.ContentID)"><h5>@item.Headline</h5></a>
                                        <span class="user-create">@item.AuthorName</span>
                                        <span class="date-create">@item.PublishDate.ToShortDateString()</span>
                                        <p class="detail">@item.Summary.RemoveHtml().Truncate(140)</p>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else if (Model.ListContent.Count == 1)
                {
                    <div class="title-form">
                        <span style="text-transform:uppercase;">@Model.ListContent.FirstOrDefault().Headline</span>
                    </div>
                    <div class="detail-page" style="padding: 5px 10px">
                        @Html.Raw(@Model.ListContent.FirstOrDefault().Body)
                        @if (Model.ListContent.FirstOrDefault().ListDownload.Count > 0)
                {
                    foreach (var item in Model.ListContent.FirstOrDefault().ListDownload)
                    {
                        var dataFile = Server.MapPath("~" + @item.Url);
                        FileInfo file = new FileInfo(dataFile);
                        long FileInBytes = file.Length;
                        string sizestr = "";
                        if (FileInBytes < 1024)
                        {
                            sizestr = FileInBytes.ToString() + "B";
                        }
                        else if (FileInBytes < 1048576)
                        {
                            float FileInKBytes = FileInBytes;
                            FileInKBytes /= 1024;
                            sizestr = FileInKBytes.ToString("#.00") + "KB";
                        }
                        else
                        {
                            float FileInMBytes = FileInBytes;
                            FileInMBytes /= 1048576;
                            sizestr = FileInMBytes.ToString("#.##") + "MB";
                        }

                        <div class="btn_download">
                            <a class="download col-lg-6 col-md-8 col-xs-6 col-sm-6 df-color" target="_blank" href="@item.Url">
                                <svg class="tcom-icon tcom-icon-download df-color text-left" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="-276.2 767.6 32 32"> <path d="M-250.3 777.6v15.9h-20v-15.9h6.4v1h-5.4v13.9h18v-13.9h-5.3v-1h6.3zm-14.3 7.2l4.5 4.5 4.5-4.5-.7-.7-3.3 3.3v-15.1h-1v15.1l-3.3-3.2-.7.6z"></path></svg>
                                <span>  @item.Name</span>
                            </a>
                            <span class="col-lg-2 col-md-2 col-xs-3 col-sm-1">@Ext(@item.Url.Trim())</span>
                            <span class="col-lg-2 sizeDownload hidden-md col-sm-2 hidden-xs">@sizestr</span>
                            <a class="btnDownload btn bg-white upper df-color col-lg-2 col-md-2 col-xs-3 col-sm-3" href="@Url.Action(MVC.Layout.DownloadAttached(item.DownloadID))">@Resource.Download</a>
                        </div>
                            }
                        }
                    </div>
                }
                else
                {
                    <div class="title-form">
                        <span style="text-transform:uppercase;">@Model.Group.Title</span>
                    </div>
                    <div class="detail-page" style="padding: 5px 10px">
                        @Resource.Updating
                    </div>
                }
            </div>
        </div>
    </div>
</div>


@helper Ext(string url)
{
string ext = "";
if (url.EndsWith(".pdf"))
{
    ext = "PDF";
}
else if (url.EndsWith(".doc"))
{
    ext = "DOC";
}
else if (url.EndsWith(".docx"))
{
    ext = "DOCX";
}
else if (url.EndsWith(".xls"))
{
    ext = "XLS";
}
else if (url.EndsWith(".xlsx"))
{
    ext = "XLSX";
}
else if (url.EndsWith(".ppt"))
{
    ext = "PPT";
}
else if (url.EndsWith(".zip"))
{
    ext = "ZIP";
}
else if (url.EndsWith(".rar"))
{
    ext = "RAR";
}
else if (url.EndsWith(".txt"))
{
    ext = "TXT";
}
    <p>@ext</p>
}
@section scripts{
    <script>
        $(document).ready(function () {
            var url = window.location;
            // Will only work if string in href matches with location
            $('.cat-child ul a[href="' + url + '"]').parents('li').addClass('active');

            // Will also work for relative and absolute hrefs
            $('.cat-child ul a').filter(function () {
                return this.href == url;
            }).parents('li').addClass('active');

        });
    </script>
}
