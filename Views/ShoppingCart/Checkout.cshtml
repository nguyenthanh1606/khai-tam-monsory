@model Frontend.Models.CheckoutViewModel
@{
    ViewBag.Title = Resource.Checkout;
}
<link rel="stylesheet" href="~/Themes/CoffeeBean/css/process-bar.css">
<link rel="stylesheet" href="~/Themes/CoffeeBean/css/jquery.bootstrap-touchspin.min.css">

<section class="banner">
    @Html.BannerImage(4, Request.Cookies["lang"].Value, new { alt = "Coffee Bean", title = "Coffee Bean", @class = "w-100 img-fluid" })
</section>


<div class="progress-payment justify-content-md-center wrapper">
    <div id="step-title-checkout" class="checkout-wrap col-md-8">
        <ul class="checkout-bar wizard_steps anchor">
            <li class="first visited"> <a href='@Url.Action("List","ShoppingCart")' v-bind:class="classStep(1)"> Giỏ hàng</a> </li>

            <li class="active"><a href="javascript:void(0)" v-bind:class="classStep(2)">THông tin giao hàng</a> </li>

            <li> <a href="javascript:void(0)" v-bind:class="classStep(3)">Thanh toán</a> </li>
        </ul>
    </div>
</div>

@*<div class="bread">
        <div id="step-title-checkout" class="wrap-page pd-left pd-right">
            <ul class="wizard_steps anchor">
                <li class="active"><a href="javascript:void(0)" v-bind:class="classStep(1)"><span class="rounded-circle circle">1</span><span>Đăng nhập</span></a></li>
                <li><a href="javascript:void(0)" v-bind:class="classStep(2)"><span class="rounded-circle circle">2</span><span>Thông tin giao hàng</span></a></li>
                <li><a href="javascript:void(0)" v-bind:class="classStep(3)"><span class="rounded-circle circle">3</span><span>Phương thức thanh toán</span></a></li>
                <li><a href="javascript:void(0)" v-bind:class="classStep(4)"><span class="rounded-circle circle">4</span><span>Hoàn tất đơn hàng</span></a></li>
                <li class="step-title-checkout-none"><a href="#"></a></li>
            </ul>
        </div>
    </div>*@

<main class="not-home">
    <div class="cartlayout row wrapper space-between" id="checkout_page">
        <section class="left card col-md-8 p-0">
            <div v-if="isOnStep(1)">
                @if (!User.Identity.IsAuthenticated)
                {
                    <ul class="nav nav-tabs row mx-0" id="myTab" role="tablist">
                        <li class="nav-item card-head-2 col-md-6">
                            <div class="mm text-center active show" id="home-tab" data-toggle="tab" href="#home" role="tab" aria-controls="home" aria-selected="true">
                                <h4 class="toUpper mb-0">@Resource.Login</h4>
                                <small>Đăng nhập hoặc đăng kí tài khoản</small>
                            </div>
                        </li>
                        <li class="nav-item card-head-2 col-md-6">
                            <div class="mm text-center" id="profile-tab" data-toggle="tab" href="#profile" role="tab" aria-controls="profile" aria-selected="false">
                                <h4 class="toUpper mb-0">@Resource.Customer</h4>
                                <small>Mua hàng không cần tài khoản</small>
                            </div>
                        </li>
                    </ul>
                    <div class="tab-content" id="myTabContent">
                        <div class="card-main-2 tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab">
                            <div class="dangky-main m-auto col-md-7 no-pd" v-show="checkoutWithoutLogin === 0">
                                @{Html.RenderAction("LoginPartial", "Account");}
                            </div>
                        </div>
                        <div class="card-main-2 tab-pane fade" id="profile" role="tabpanel" aria-labelledby="profile-tab">
                            <div class="dathoa-form-2 m-auto col-md-7 no-pd">
                                <div class="form-group">
                                    <p class="text-center" style="font-weight: normal; font-family: 'Proxima-R'">Vui lòng nhập email</p>
                                    @Html.TextBoxFor(m => m.Order.Email, new { @class = "form-control", v_model = "email", placeholder = "Email" })
                                </div>
                                <div class="row mx-0">
                                    <div class="btn-buy">
                                        <button type="button" class="btn-ds-2 toUpper" v-on:click="ProceedWithoutLogin">@Resource.Continue</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="step row space-between" style="padding-left: 1rem; padding-right: 0px;">
                        <div class="back">
                            <a href="/ShoppingCart/List" class="c-gray">Quay lại giỏ hàng</a>
                        </div>
                    </div>
                }
            </div>
            <div v-if="isOnStep(2)">
                <div class="card-head-2 row">
                    <div class="col-md-12">
                        <h4 class="toUpper mb-0">Địa chỉ giao hàng</h4>
                        <small>Chọn địa chỉ giao hàng hoặc tạo mới địa chỉ</small>
                    </div>
                </div>
                <div id="shipping_address" class="card-main-2">
                    @if (User.Identity.IsAuthenticated)
                    {
                        <a v-on:click="AddAddress" class="addadress">Thêm địa chỉ giao hàng mới</a>

                        <div class="dathoa-form" v-for="item in listAddress">
                            <div class="list-address">
                                <div class="name-customer">
                                    <p>{{item.CustomerName}} <i class="fas fa-edit" style="padding-left: 5px; cursor: pointer; outline: none;" v-on:click="EditAddress(item.Id)"></i></p>
                                </div>
                                <div class="phone">
                                    <p>Số điện thoại: {{item.Phone}}</p>
                                </div>
                                <div class="address">
                                    <p>Địa chỉ: {{item.Address}}</p>
                                </div>
                                <div class="btn-buy mt-3">
                                    <button type="button" v-on:click="SelectAddress(item)" class="btn-ds-2 toUpper">Chọn địa chỉ</button>
                                </div>
                            </div>
                        </div>
                        <transition name="fade">
                            <div id="edit_address" v-show="isEditAddress">
                            </div>
                        </transition>
                        <div class="clearfix"></div>
                        <div class="step row space-between" style="padding-left: 0;padding-right: 0;">
                            <div class="back">
                                <a href="/ShoppingCart/List" class="c-gray">Quay lại giỏ hàng</a>
                            </div>
                        </div>
                    }
                    else
                    {
                        <form class="dathoa-form-2 form-horizontal" id="newAddressForm">
                            <div class="row">
                                <div class="col-md-6 no-pd">
                                    <label for="" class="require">@Resource.Fullname</label>
                                    <div class="col-md-12 input-group">
                                        @Html.TextBoxFor(m => m.Order.CustomerAddress.CustomerName, new { @class = "form-control", placeholder = Resource.Fullname })
                                        @Html.ValidationMessageFor(m => m.Order.CustomerAddress.CustomerName)
                                    </div>
                                </div>
                                <div class="col-md-6 no-pd">
                                    <label for="" class="require">@Resource.Phone</label>
                                    <div class="col-md-12 input-group">
                                        @Html.TextBoxFor(m => m.Order.CustomerAddress.Phone, new { @class = "form-control", placeholder = Resource.Phone })
                                        @Html.ValidationMessageFor(m => m.Order.CustomerAddress.Phone)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6 no-pd">
                                    <label for="" class="require">Tỉnh / Thành phố</label>
                                    <div class="col-md-12 input-group">
                                        @Html.DropDownListFor(m => m.Order.CustomerAddress.Province, ViewBag.ListCity as SelectList,
                                        string.Format(Resource.SelectPlaceHolder, Resource.City),
                                        new { @class = "form-control select-search", onChange = string.Format("ChangeSelectedCity(this,'#{0}','{1}')", Html.IdFor(m => m.Order.CustomerAddress.District), string.Format(Resource.SelectPlaceHolder, Resource.District)) })
                                        @Html.ValidationMessageFor(m => m.Order.CustomerAddress.Province)
                                    </div>
                                </div>
                                <div class="col-md-6 no-pd">
                                    <label for="" class="require">Quận / Huyện</label>
                                    <div class="col-md-12 input-group">
                                        @Html.DropDownListFor(m => m.Order.CustomerAddress.District, ViewBag.ListDistrict as SelectList,
                                        string.Format(Resource.SelectPlaceHolder, Resource.District),
                                        new { @class = "form-control select-search", onChange = string.Format("ChangeSelectedDistrict(this,'#{0}','{1}')", Html.IdFor(m => m.Order.CustomerAddress.Ward), string.Format(Resource.SelectPlaceHolder, Resource.Ward)) })
                                        @Html.ValidationMessageFor(m => m.Order.CustomerAddress.District)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6 no-pd">
                                    <label for="" class="require">Phường / Xã</label>
                                    <div class="col-md-12 input-group">
                                        @Html.DropDownListFor(m => m.Order.CustomerAddress.Ward, ViewBag.ListWard as SelectList,
                                        string.Format(Resource.SelectPlaceHolder, Resource.Ward), new { @class = "form-control select-search" })
                                        @Html.ValidationMessageFor(m => m.Order.CustomerAddress.Ward)
                                    </div>
                                </div>
                                <div class="col-md-6 no-pd">
                                    <label for="" class="require">Loại địa chỉ</label>
                                    <div class="col-md-12 input-group">
                                        @Html.DropDownListFor(m => m.Order.CustomerAddress.AddressType, ViewBag.ListAddressType as SelectList,
                                        string.Format(Resource.SelectPlaceHolder, Resource.AddressType),
                                        new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.Order.CustomerAddress.AddressType)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12 no-pd">
                                    <label for="" class="require">@Resource.Address</label>
                                    <div class="col-md-12 input-group">
                                        @Html.TextBoxFor(m => m.Order.CustomerAddress.Address, new { @class = "form-control", placeholder = Resource.Address })
                                    </div>
                                </div>
                            </div>
                            <div class="row mx-0 mt-3">
                                <div class="btn-buy">
                                    <button class="btn-ds toUpper" type="button" v-on:click="ChooseNewAddress()">Giao đến địa chỉ này</button>
                                </div>
                            </div>
                        </form>
                        <div class="clearfix"></div>
                        <div class="step row space-between" style="padding-left: 0;padding-right: 0;">
                            <div class="back">
                                <a href="/ShoppingCart/List" class="c-gray">Quay lại giỏ hàng</a>
                            </div>
                        </div>
                    }

                    @*<div class="row fb-info">
                        <span>Lấy thông tin liên lạc từ: </span>
                        <a href="#" class="btn-fb c-white"><i class="fab fa-facebook-f"></i></a>
                        <span>Facebook</span>
                    </div>*@
                </div>
            </div>
            <div v-if="isOnStep(3)">
                <div class="card-head-2 row">
                    <div class="col-md-12">
                        <h4 class="toUpper mb-0">Phương thức thanh toán</h4>
                        <small>Thanh toán khi nhận hàng hoặc qua ngân hàng</small>
                    </div>
                </div>
                <div id="cashForm" class="card-main-2">
                    @using (Html.BeginForm("Checkout", "ShoppingCart", FormMethod.Post))
                    {
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="panel panel-info">
                                    <div class="panel-body" style="padding: 10px;">
                                        @Html.AntiForgeryToken()
                                        @if (User.Identity.IsAuthenticated)
                                        {
                                        <input type="hidden" name="@Html.NameFor(m => m.Order.CustomerAddressId)" id="@Html.IdFor(m => m.Order.CustomerAddressId)" v-model="shippingAddress.Id" />
                                        }
                                        else
                                        {
                                        <input type="hidden" name="@Html.NameFor(m => m.Order.Email)" id="@Html.IdFor(m => m.Order.Email)" v-model="email" />
                                        <input type="hidden" v-for="data in customerAddressFormData" v-bind:name="data.name" v-bind:value="data.value" />
                                        }
                                        <div class="form-choice" style="display:none;">
                                            @*@foreach (var type in Model.ListShippingMethod)
                                            {
                                            <div class="radio">
                                                <label>@Html.RadioButtonFor(m => m.Order.ShippingMethod, type.Value)@type.Text</label>
                                            </div>
                                            }*@
                                            <p style="margin-left:20px"> @Model.DeliviryMethod</p>
                                        </div>
                                        @*<div class="form-title">@Html.DisplayNameFor(m => m.Order.PaymentType)</div>*@
                                        <div class="form-choice" style="display:none;" id="directPayment">
                                            @foreach (var type in Model.ListPaymentType)
                                            {
                                            if (type.Value == "0")
                                            {
                                            <div class="radio">
                                                <label>@Html.RadioButtonFor(m => m.Order.PaymentType, type.Value)@type.Text</label>
                                            </div>
                                            }

                                            }
                                        </div>
                                        @*<div class="form-title" style="font-size: larger; font-family: Myriad-Condensed; text-transform: uppercase;">@Resource.Receiver</div>*@
                                        <div class="form-horizontal" style="display:none;">
                                            <p><span class="name">{{shippingAddress.CustomerName}}</span></p>
                                            <p>@Resource.Phone: {{shippingAddress.Phone}}</p>
                                            <p>@Resource.Address: {{shippingAddress.Address}}</p>
                                            <div class="checkbox" style="display:none;">
                                                <label><input type="checkbox" name="@Html.NameFor(m => m.Order.UseNameOnAddress)" value="true" v-model="useNameOnAddress">@Resource.UseNameAndPhoneOnShippingAddress</label>
                                                <input name="@Html.NameFor(m => m.Order.UseNameOnAddress)" value="false" type="hidden">
                                            </div>
                                            <div class="panel" v-show="!useNameOnAddress" style="display:none;">
                                                <div class="form-group">
                                                    <span class="col-md-4 col-sm-6 col-xs-12 control-label">@Html.DisplayNameFor(m => m.Order.ReceiverName)</span>
                                                    <div class="col-md-12 col-sm-6 col-xs-12">
                                                        @Html.TextBoxFor(model => model.Order.ReceiverName, new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.Order.ReceiverName)
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <span class="col-md-4 col-sm-6 col-xs-12 control-label">@Html.DisplayNameFor(m => m.Order.ReceiverPhone)</span>
                                                    <div class="col-md-12 col-sm-6 col-xs-12">
                                                        @Html.TextBoxFor(model => model.Order.ReceiverPhone, new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.Order.ReceiverPhone)
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div>
                                            <p><strong style="font-size: 18px;">@Model.DirectPayment.ParaValue</strong></p>
                                            @Html.Raw(Model.DirectPayment.Description)
                                            <br />
                                            <br />
                                        </div>
                                        <div class="btn-buy">
                                            <button type="submit" class="btn-ds-2 toUpper">@Resource.Checkout</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    }
                </div>
            </div>
            @*<div class="step row space-between" style="padding-left: 0;padding-right: 0;">
                <div class="back">
                    <a href="#" class="c-gray">Quay lại giỏ hàng</a>
                </div>
                <div class="btn-buy">
                    <a href="#" class="btn-ds toUpper">Tiếp tục</a>
                </div>
            </div>*@
        </section>

        <section class="card right">
            @{Html.RenderAction("OrderSummary");}
        </section>
    </div>
</main>

@section js{
    <script>
        function EditAddressFail(data){
            ShowAlertDialog(data.errorMsg);
        }

        function DoneEditAddress(data, isEdit){
            if(isEdit){
                vmCheckout.listAddress = data.listAddress;
                vmCheckout.isEditAddress = false;
            }
            else{
                vmCheckout.listAddress.push(data);
                vmCheckout.isEditAddress = false;
            }
        }

        function CancelEdit(){
            vmCheckout.isEditAddress = false;
        }

        function ChangePaymentType(n)
        {
            if (n == 0)
            {
                if ($("#bankTransfer").hasClass("active"))
                {
                    $("#directPayment").prop('checked', true);
                }
                else
                {
                    $("#bankPayment input").prop('checked', false);
                }
            }
            else
            {
                if ($("#bankTransfer").hasClass("active"))
                {
                    $("#directPayment").prop('checked', false);
                }
                else
                {
                    $("#bankPayment input").prop('checked', true);
                }
            }
        }

        var baseEditAddress = '@Url.Action("EditAddressCheckout", "Account")';
        var vmCheckout = new Vue({
            el: '#checkout_page',
            data: {
                currentStep: @(User.Identity.IsAuthenticated? 2 : 1),
                listAddress: @Html.Raw(Json.Encode(Model.ListAddress)),
                isEditAddress:false,
                useNameOnAddress:true,
                shippingAddress:@Html.Raw(Json.Encode(new Frontend.Models.CustomerAddressOverviewViewModel())),
                checkoutWithoutLogin:0,
                email:@Html.Raw(Json.Encode(ViewBag.Email)),
                customerAddress:@Html.Raw(Json.Encode(new Frontend.Models.CustomerAddressViewModel())),
                customerAddressFormData:null,
            },
            methods:{
                ProceedWithoutLogin:function(){
                    var self = this;
                    var re = /^(([^<>()\[\]\\.,;:\s@@"]+(\.[^<>()\[\]\\.,;:\s@@"]+)*)|(".+"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                    if(self.email && re.test(self.email)){
                        this.currentStep = 2;
                        this.$nextTick(function () {
                            InitAjaxForm('#newAddressForm');
                        });
                    }
                    else{
                        alert('@Html.Raw(Resource.PleaseInputValidEmail)');
                    }
                },
                EditAddress:function(id){
                    var self = this;
                    $.ajax({
                        type: "GET",
                        url: baseEditAddress + "/" + id,
                        success: function (data) {
                            $('#edit_address').html(data);
                            InitAjaxForm('#edit_address');
                            self.isEditAddress = true;
                        },
                        error: function (jqXHR, textStatus) {
                            alert(textStatus);
                        }
                    });
                },
                AddAddress:function(id){
                    var self = this;
                    $.ajax({
                        type: "GET",
                        url: baseEditAddress,
                        success: function (data) {
                            $('#edit_address').html(data);
                            InitAjaxForm('#edit_address');
                            self.isEditAddress = true;
                        },
                        error: function (jqXHR, textStatus) {
                            alert(textStatus);
                        }
                    });
                },
                SelectAddress:function(item){
                    this.currentStep = 3;
                    this.shippingAddress = item;
                },
                ChooseNewAddress:function(){
                    var self = this;
                    var form = $("#newAddressForm");
                    form.validate();
                    if(form.valid()){
                        self.customerAddressFormData = form.serializeArray();
                        self.shippingAddress.CustomerName = self.customerAddress.CustomerName;
                        self.shippingAddress.Phone = self.customerAddress.Phone;
                        self.shippingAddress.Address = self.customerAddress.Address +
                            ', ' +  $('#@Html.IdFor(m => m.Order.CustomerAddress.Ward) option:selected').text() +
                            ', ' +  $('#@Html.IdFor(m => m.Order.CustomerAddress.District) option:selected').text() +
                            ', ' +  $('#@Html.IdFor(m => m.Order.CustomerAddress.Province) option:selected').text();
                        self.currentStep = 3;
                    }
                },
                classStep: function(step) {
                    return {
                        'disabled': this.currentStep < step,
                        'selected': this.currentStep === step,
                        'done': this.currentStep > step
                    }
                },
                isOnStep:function(step){
                    return this.currentStep === step;
                }
            },
            watch: {
                currentStep: function(val){
                    if(val === 3){
                        @*this.$nextTick(function(){
                            $('#@Html.IdFor(m => m.Order.ShippingDate)').datetimepicker({
                                locale: '@Request.Cookies["lang"].Value.Substring(0,2)',
                                format: 'DD/MM/YYYY'
                            });
                        })*@
                    }
                }
            }
        });


    </script>
}

